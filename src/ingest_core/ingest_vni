#!/usr/bin/python

import os
import re
import sys
import simplejson
import pg
import pgdb
import time
import errno
import pipes
import pycurl
import zipfile
import nntplib
import tempfile
import StringIO
import myemsl.util
from optparse import OptionParser

import myemsl.ingest

from subprocess import PIPE, Popen
from myemsl.getconfig import getconfig
config = getconfig()

parser = OptionParser()
parser.add_option("-b", "--bundle", dest="bundle", help="Bundle to process")
parser.add_option("-m", "--timing", dest="timingfile", help="Timing file", default="/tmp/timing")
parser.add_option("-i", "--step", dest="step", help="step we are operating", default=0, type=int)
parser.add_option("-u", "--username", dest="username", help="Username")
parser.add_option("-p", "--prefix", dest="prefix", help="MyEMSL Prefix", default="/srv/myemsl-ingest")
parser.add_option("-f", "--statefd", dest="sfd", help="MyEMSL Status FD", default=1, type=int)

(options, args) = parser.parse_args()

jobid = None

try:
	userdir = "%s/%s" %(options.prefix,options.username)
	myemsl.util.try_mkdir(userdir)
	transaction = myemsl.ingest.get_transaction(options.username)
	jobid = transaction + config.ingest.job_offset
	unbundledir = "%s/%s/bundle" %(options.prefix,options.username)
	myemsl.util.try_mkdir(unbundledir)
	myemsl.util.try_mkdir(unbundledir.replace('bundle', 'state'))
	myemsl.util.try_mkdir(unbundledir.replace('bundle', 'metadata'))
	unbundledir = "%s/%s/bundle/%i" %(options.prefix,options.username, transaction)
	os.mkdir(unbundledir)
except Exception, e:
	print e
	sys.exit(-1)

os.write(int(options.sfd), str(jobid)+"\n")
myemsl.ingest.new_state(jobid)
myemsl.ingest.update_person_id(jobid, options.username)
myemsl.ingest.update_state(jobid, options.step, 'SUCCESS', 'completed')
myemsl.ingest.update_trans_id(jobid, transaction)
#Not as many steps anymore since trans job merged.
options.step+=1

timingfile = open(options.timingfile+"."+str(jobid), 'a')

timingfile.write("ingest_job_submit:s:%s\n" %(time.time()))
timingfile.flush()
(bfdesc, bfname) = tempfile.mkstemp()
os.write(bfdesc, "#!/bin/sh\n")
os.write(bfdesc, "#SBATCH -o /tmp/output."+str(jobid)+"\n")
os.write(bfdesc, "#SBATCH -e /tmp/error."+str(jobid)+"\n")
os.write(bfdesc, "#SBATCH --open-mode=append\n")
os.write(bfdesc, "srun -n 1 /usr/bin/python -m myemsl/catchall /usr/libexec/myemsl/ingest/ingest_job --bundle "+pipes.quote(str(options.bundle))+" --unbundledir "+pipes.quote(str(unbundledir))+" --username "+str(options.username)+" --transaction "+str(transaction)+" --step "+str(options.step+1)+" --jobid "+str(jobid)+"\n")
os.close(bfdesc)
if os.system("/usr/bin/sbatch "+bfname) != 0:
	myemsl.ingest.update_state(jobid, options.step, 'ERROR', 'error submitting ingest job\n')
	sys.exit(-1)

os.unlink(bfname)
timingfile.write("ingest_job_submit:e:%s\n" %(time.time()))
timingfile.close()

myemsl.ingest.update_state(jobid, options.step, "SUCCESS", "completed\n")
sys.exit(0)
